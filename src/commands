#pragma once
#include "conponent"

namespace HeraCross
{
typedef void (*cmd_handler_t)(void);
typedef void (*lcmd_handler_t)(int value);
// 声明
void cmd_test_handler();
void cmd_motor_l_f_handler();
void cmd_motor_l_b_handler();
void cmd_motor_l_halt_handler();
void cmd_motor_r_f_handler();
void cmd_motor_r_b_handler();
void cmd_motor_r_halt_handler();
void cmd_tong_off_handler();
void cmd_tong_on_handler();
void cmd_neck_off_handler();
void cmd_neck_on_handler();
void cmd_neck_mid_handler();
void cmd_cleave_off_handler();
void cmd_cleave_on_handler();
void cmd_step_f_handler();
void cmd_step_b_handler();
void cmd_step_halt_handler();
void cmd_scan_handler();
void act_grab_handler();
void act_climb_handler();
void act_safe_cleave_up_handler();
void act_dont_die_handler();
void lcmd_motor_l_handler(int value);
void lcmd_motor_r_handler(int value);

// 注册表
cmd_handler_t cmd_table[CMD_MAX_COUNT];
lcmd_handler_t lcmd_table[LCMD_MAX_COUNT];

class Commands
{
private:
    int runned_count = 0;

public:
    Commands()
    {
        REG_CMD(CMD_TEST, cmd_test_handler);
        REG_CMD(CMD_MOTOR_L_F, cmd_motor_l_f_handler);
        REG_CMD(CMD_MOTOR_L_B, cmd_motor_l_b_handler);
        REG_CMD(CMD_MOTOR_L_HALT, cmd_motor_l_halt_handler);
        REG_CMD(CMD_MOTOR_R_F, cmd_motor_r_f_handler);
        REG_CMD(CMD_MOTOR_R_B, cmd_motor_r_b_handler);
        REG_CMD(CMD_MOTOR_R_HALT, cmd_motor_r_halt_handler);
        REG_CMD(CMD_TONG_OFF, cmd_tong_off_handler);
        REG_CMD(CMD_TONG_ON, cmd_tong_on_handler);
        REG_CMD(CMD_NECK_OFF, cmd_neck_off_handler);
        REG_CMD(CMD_NECK_ON, cmd_neck_on_handler);
        REG_CMD(CMD_NECK_MID, cmd_neck_mid_handler);
        REG_CMD(CMD_CLEAVE_OFF, cmd_cleave_off_handler);
        REG_CMD(CMD_CLEAVE_ON, cmd_cleave_on_handler);
        REG_CMD(CMD_STEP_F, cmd_step_f_handler);
        REG_CMD(CMD_STEP_B, cmd_step_b_handler);
        REG_CMD(CMD_STEP_HALT, cmd_step_halt_handler);
        REG_CMD(CMD_SCAN, cmd_scan_handler);
        REG_CMD(ACT_GRAB, act_grab_handler);
        REG_CMD(ACT_CLIMB, act_climb_handler);
        REG_CMD(ACT_SAFE_CLEAVE_UP, act_safe_cleave_up_handler);
        REG_CMD(ACT_DONT_DIE, act_dont_die_handler);

        REG_LCMD(LCMD_MOTOR_L, lcmd_motor_l_handler);
        REG_LCMD(LCMD_MOTOR_R, lcmd_motor_r_handler);
    }
    void TryRun(long cmd)
    {
        if(cmd<LCMD_IDENTIFIER)
        {
            if (cmd_table[cmd] != nullptr)
            {
                cmd_table[cmd]();
                Serial.print("CMD_SUC_ID:");
                Serial.println(runned_count++);
            }
            else
            {
                Serial.println("CMD_FAIL");
            }
        }
        else// 101_255
        {
            int lcmd = cmd / 1000,para = (cmd % 1000) - 255;
            if (lcmd_table[lcmd] != nullptr)
            {
                TRACESV("REC:",cmd);
                TRACESV("LCMD_ID:",lcmd);
                TRACESV("LCMD_PARA:",para);
                lcmd_table[lcmd](para);
                Serial.print("LCMD_SUC_ID:");
                Serial.println(runned_count++);
            }
            else
            {
                Serial.println("LCMD_FAIL");
            }
        }
    }
};

// 实现

void cmd_test_handler()
{
    scan.test();
}

void cmd_tong_off_handler()
{
    servo_tong.TurnMin();
}

void cmd_tong_on_handler()
{
    servo_tong.TurnMax();
}

void cmd_neck_off_handler()
{
    servo_neck.TurnMin();
}

void cmd_neck_on_handler()
{
    servo_neck.TurnMax();
}

void cmd_neck_mid_handler()
{
    servo_neck.SetAngle(SERVO_NECK_MID);
}

void cmd_cleave_off_handler()
{
    servo_cleave.TurnMin();
}

void cmd_cleave_on_handler()
{
    servo_cleave.TurnMax();
}

void cmd_motor_l_f_handler()
{
    motor_l.Forward();
}

void cmd_motor_l_b_handler()
{
    motor_l.Backward();
}

void cmd_motor_l_halt_handler()
{
    motor_l.Off();
}

void cmd_motor_r_f_handler()
{
    motor_r.Forward();
}

void cmd_motor_r_b_handler()
{
    motor_r.Backward();
}

void cmd_motor_r_halt_handler()
{
    motor_r.Off();
}

void cmd_step_f_handler()
{
    motor_l.Forward();
    motor_r.Forward();
}

void cmd_step_b_handler()
{
    motor_l.Backward();
    motor_r.Backward();
}

void cmd_step_halt_handler()
{
    motor_l.Off();
    motor_r.Off();
}
void cmd_scan_handler()
{
    if (scan.get())
    {
        Serial.print("Target:");
        Serial.println(colornames[scan.target]);
        Serial.print("Seq:");
        for (int i = 0; i < COLOR_SEQ_COUNT; i++)
        {
            Serial.print(colornames[scan.seq[i]]);
            Serial.print(",");
        }
        Serial.println();
        screen.ShowColor(scan.target, scan.seq);
    }
}

void act_grab_handler()
{
    servo_neck.SetAngle(SERVO_NECK_MID,2);
    servo_tong.SetPulse(SERVO_TONG_GRAB);
    servo_cleave.TurnMin();
    delay(1000);
    servo_tong.TurnMin();
    delay(400);
    servo_cleave.TurnMax();
    delay(200);
    servo_neck.TurnMin();
}

// 爬台阶命令,前轮到台阶就可以点,尽量靠右一点
void act_climb_handler()
{
    servo_neck.TurnMin();

    // 第一个台阶
    motor_l.Forward();
    motor_r.Forward();
    delay(250); // 这个时间要够短，前轮刚好上去就行
    motor_l.Off();
    motor_r.Off();

    servo_cleave.SetAngle(SERVO_CLEAVE_CLIMB,10);
    motor_l.Forward();
    motor_r.Forward();
    delay(400); // 这里也要短一点，不要影响下一个台阶
    motor_l.Off();
    motor_r.Off();

    servo_cleave.TurnMax();

    // 第二个台阶
    motor_l.Forward();
    motor_r.Forward();
    delay(500); // 这个时间要够短，前轮刚好上去就行
    motor_l.Off();
    motor_r.Off();

    servo_cleave.TurnMax();
    motor_l.Forward();
    motor_r.Forward();
    delay(550);
    motor_l.Off();
    motor_r.Off();

    // 到此为止,已经爬过了两个台阶

    // 下台阶
    motor_l.Forward();
    motor_r.Forward();
    delay(400);
    // motor_l.Brake();
    // motor_r.Brake();
    // delay(400); // 等稳定

    act_safe_cleave_up_handler();

    motor_l.Off();
    motor_r.Off();
}
void act_safe_cleave_up_handler()
{
    servo_neck.SetAngle(SERVO_NECK_MID, 30);
    servo_cleave.TurnMax();
    servo_neck.TurnMin();
}
void act_dont_die_handler()
{
    servo_cleave.TurnMin();

    motor_l.Forward();
    motor_r.Forward();
    delay(100);
    motor_l.Off();
    motor_r.Off();

    servo_neck.SetAngle(SERVO_NECK_MID, 30);

    servo_cleave.TurnMax();

    servo_neck.TurnMin(); // 最后朝前
}
void lcmd_motor_l_handler(int value)
{
    motor_l.Linear(value);
}
void lcmd_motor_r_handler(int value)
{
    motor_r.Linear(value);
}
}

HeraCross::Commands commands;